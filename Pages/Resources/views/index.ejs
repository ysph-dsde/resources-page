```{=html}

<head>
  <meta charset="UTF-8">
  <title>Resources with Features:
    - Two categories filter with sorting by title and date updated - May 10th, 2025
    - Show more with starting at 5 rows of tiles and back-to-top - June 11th, 2025
    - Default sorting by ranking (ascending) then title (A-Z) called "No sorting" - Sept. 11th, 2025
  </title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
</head>

<body>
  <div>
    <div class="main-container">
      <div class="sidebar-wrapper">
        <button class="sidebar-toggler">â˜°</button>
        <aside class="sidebar">
          <div class="sort-wrapper">
            <select id="sortOptions" class="form-control" style="width: 94%;">
              <option value="default" selected>No sorting</option>
              <option value="title-asc">Title A-Z</option>
              <option value="title-desc">Title Z-A</option>
              <option value="date-desc">Date Updated: Newest to Oldest</option>
              <option value="date-asc">Date Updated: Oldest to Newest</option>
            </select>
          </div>
          <form id="categoryFilter1" class="form">
            <h5>Region and Affiliation</h5>
            <% if (items && items[0].items && items[0].items.length > 0) { %>
              <% const categories1 = new Set(); %>
              <% items[0].items.forEach(function(item) { 
                if (item.categories1) { 
                  item.categories1.forEach(function(cat) {
                    categories1.add(cat);
                  });
                }
              }); %>
              <% categories1.forEach(function(category) { %>
                <div class="checkbox-container">
                  <input type="checkbox" name="category1" value="<%= encodeURIComponent(category) %>" id="category1-<%= encodeURIComponent(category) %>">
                  <label for="category1-<%= encodeURIComponent(category) %>" style="margin-bottom: 0px;"><%= category %></label>
                </div>
              <% }); %>
            <% } %>
          </form>

          <br>

          <form id="categoryFilter2" class="form">
            <h5>Services Offered</h5>
            <% if (items && items[0].items && items[0].items.length > 0) { %>
              <% const categories2 = new Set(); %>
              <% items[0].items.forEach(function(item) { 
                if (item.categories2) { 
                  item.categories2.forEach(function(cat) {
                    categories2.add(cat);
                  });
                }
              }); %>
              <% categories2.forEach(function(category) { %>
                <div class="checkbox-container">
                  <input type="checkbox" name="category2" value="<%= encodeURIComponent(category) %>" id="category2-<%= encodeURIComponent(category) %>">
                  <label for="category2-<%= encodeURIComponent(category) %>" style="margin-bottom: 0px;"><%= category %></label>
                </div>
              <% }); %>
            <% } %>
          </form>
        </aside>
      </div>

      <div class="main-content">
        <div class="container" id="tilesContainer">
          <% let visibleTileCount = 0; %>
          <% items[0].items.forEach(function(item) { 
            if (item.tiles && item.tiles.length > 0) { 
              item.tiles.forEach(function(tile) { %>
                <div class="tile <%= (visibleTileCount < 9) ? '' : 'hidden' %>"
                     data-categories1="<%= item.categories1 ? item.categories1.map(cat => encodeURIComponent(cat)).join(' ') : '' %>"
                     data-categories2="<%= item.categories2 ? item.categories2.map(cat => encodeURIComponent(cat)).join(' ') : '' %>"
                     data-ranking="<%= tile.ranking %>"
                     data-title="<%= tile.title %>"
                     data-date="<%= tile['date-updated'] %>">
                  <img src="<%- tile.image %>" class="image">
                  <h2 class="js-line-count"><%= tile.title %></h2>
                  <p class="description"><%= tile.description %></p>
                  <div class="card-header py-1 px-2 border-bottom bg-light">
                    <small class="card-text">
                      <% if (tile.site) { %>
                        &nbsp;
                        <a href="<%= tile.site %>" title="Main site" class="source-code" style="color: rgba(var(--bs-link-color-rgb), var(--bs-link-opacity, 1));">
                          <i class="bi-globe"></i></a>
                      <% } %>
                      <% if (tile.group) { %>
                        &nbsp;
                        <a href="<%= tile.group %>" title="Group site" class="source-code" style="color: rgba(var(--bs-link-color-rgb), var(--bs-link-opacity, 1));">
                          <i class="bi-people-fill"></i></a>
                      <% } %>
                      <% if (tile.github) { %>
                        &nbsp;
                        <a href="<%= tile.github %>" title="GitHub page" class="source-code" style="color: rgba(var(--bs-link-color-rgb), var(--bs-link-opacity, 1));">
                          <i class="bi-github"></i></a>
                      <% } %>
                      <% if (tile.article) { %>
                        &nbsp;
                        <a href="<%= tile.article %>" title="View publication" class="source-code" style="color: rgba(var(--bs-link-color-rgb), var(--bs-link-opacity, 1));">
                          <i class="bi-journal-text"></i></a>
                      <% } %>
                      <% if (tile.info) { %>
                        &nbsp;
                        <a href="<%= tile.info %>" title="Get more information" class="source-code" style="color: rgba(var(--bs-link-color-rgb), var(--bs-link-opacity, 1));">
                          <i class="bi-info-circle"></i></a>
                      <% } %>
                      <% if (tile.topic) { %>
                        <p class="topic" style="margin-bottom: 5px;"><%= tile.topic %></p>
                      <% } else { %>
                        <p class="topic" style="display:none; margin-bottom: 5px;"></p>
                      <% } %>
                    </small>
                  </div>
                </div>
                <% visibleTileCount++; %>
              <% }); 
            } else { %>
              <p>No tiles found for this category.</p>
            <% } 
          }); %>
        </div>
        <button id="showMoreBtn" class="btn btn-primary" style="display: block; margin: 20px auto;">Show More</button>
        <a onclick="window.scrollTo(0, 0); return false;" role="button" id="quarto-back-to-top" title="Back to top"><i class="bi bi-arrow-up"></i>Back to top</a>
      </div>
    </div>
  </div>

  <script>
    function parseDate(dateStr) {
      return new Date(dateStr);
    }

    function updateLineCounts() {
      document.querySelectorAll(".tile").forEach(function (tile) {
        const h2Element = tile.querySelector(".js-line-count");
        const lineHeight = parseFloat(getComputedStyle(h2Element).lineHeight);

        const linesInH2 = Math.ceil(h2Element.scrollHeight / lineHeight);

        const pElement = tile.querySelector("p.description");
        pElement.style.display = '-webkit-box';
        pElement.style.webkitBoxOrient = 'vertical';
        pElement.style.overflow = 'hidden';

        let clampValue = 10;

        clampValue -= Math.max(0, linesInH2 - 1);

        const topicElement = tile.querySelector('.topic');
        if (topicElement && topicElement.style.display !== 'none') {
          const linesInTopic = Math.ceil(topicElement.scrollHeight / lineHeight);
          clampValue -= Math.max(0, linesInTopic - 1);
        }

        if (clampValue < 1) clampValue = 1; // Ensure at least one line is available for the description

        pElement.style.webkitLineClamp = clampValue;
      });
    }


    document.addEventListener('DOMContentLoaded', function () {
      updateLineCounts();
      window.addEventListener('resize', updateLineCounts);

      const categoryFilter1 = document.getElementById('categoryFilter1');
      const categoryFilter2 = document.getElementById('categoryFilter2');
      const sortOptions = document.getElementById('sortOptions');
      const tilesContainer = document.getElementById('tilesContainer');
      const tiles = Array.from(tilesContainer.querySelectorAll('.tile'));

      // Hold the sorted order of tiles
      let sortedTiles = [...tiles];

      const showMoreBtn = document.getElementById('showMoreBtn');
      const initialLoadCount = 9; // 5 rows
      const loadMoreCount = 3; // 1 row at a time

      showMoreBtn.addEventListener('click', function() {
        let hiddenTiles = sortedTiles.filter(tile => tile.classList.contains('hidden') && tile.classList.contains('filtered'));
        hiddenTiles.slice(0, loadMoreCount).forEach(tile => {
          tile.classList.remove('hidden');
          tile.style.display = 'block'; // Ensure display is set to block
        });
        updateLineCounts();
        if (hiddenTiles.length <= loadMoreCount) {
          showMoreBtn.style.display = 'none';
        }
      });

      function filterTiles() {
        const selectedCategories1 = Array.from(categoryFilter1.querySelectorAll('input[name="category1"]:checked')).map(input => decodeURIComponent(input.value));
        const selectedCategories2 = Array.from(categoryFilter2.querySelectorAll('input[name="category2"]:checked')).map(input => decodeURIComponent(input.value));

        let visibleTileCount = 0;

        sortedTiles.forEach(function (tile) {
          const categories1 = (tile.getAttribute('data-categories1') || '').split(' ').map(cat => decodeURIComponent(cat));
          const categories2 = (tile.getAttribute('data-categories2') || '').split(' ').map(cat => decodeURIComponent(cat));

          const matchesCategory1 = selectedCategories1.length === 0 || selectedCategories1.some(cat => categories1.includes(cat));
          const matchesCategory2 = selectedCategories2.length === 0 || selectedCategories2.some(cat => categories2.includes(cat));

          if (matchesCategory1 && matchesCategory2) {
            tile.classList.add('filtered');
            if (visibleTileCount < initialLoadCount) {
              tile.classList.remove('hidden');
              tile.style.display = 'block'; // Ensure display is set to block
              visibleTileCount++;
            } else {
              tile.classList.add('hidden');
              tile.style.display = 'none'; // Hide others
            }
          } else {
            tile.classList.remove('filtered');
            tile.classList.add('hidden');
            tile.style.display = 'none'; // Hide if it doesn't match the filter
          }
        });

        updateLineCounts();

        if (sortedTiles.filter(tile => tile.classList.contains('hidden')).length === 0) {
          showMoreBtn.style.display = 'none';
        } else {
          showMoreBtn.style.display = 'block';
        }
      }

      // Function to sort by ranking then title
      function sortByDefault() {
        sortedTiles.forEach(tile => {
          const rankAttr = tile.getAttribute('data-ranking');
          if (rankAttr) {
            tile.dataset.numericRanking = parseInt(rankAttr, 10);
          }
        });

        sortedTiles.sort((a, b) => {
          const titleA = a.getAttribute('data-title').toLowerCase();
          const titleB = b.getAttribute('data-title').toLowerCase();
          const rankingA = a.dataset.numericRanking || 0;
          const rankingB = b.dataset.numericRanking || 0;

          if (rankingA !== rankingB) {
            return rankingA - rankingB;
          }
          return titleA.localeCompare(titleB);
        });

        // Append sorted tiles back into the container
        sortedTiles.forEach(tile => {
          tilesContainer.appendChild(tile);
        });

        filterTiles(); // Apply the current filter on new sorted order
      }

      function sortTiles() {
        const sortValue = sortOptions.value;

        if (sortValue === 'default') {
          sortByDefault();
          return;
        }

        sortedTiles.sort((a, b) => {
          const titleA = a.getAttribute('data-title').toLowerCase();
          const titleB = b.getAttribute('data-title').toLowerCase();
          const dateA = parseDate(a.getAttribute('data-date'));
          const dateB = parseDate(b.getAttribute('data-date'));

          if (sortValue === 'title-asc') {
            return titleA.localeCompare(titleB);
          } else if (sortValue === 'title-desc') {
            return titleB.localeCompare(titleA);
          } else if (sortValue === 'date-asc') {
            return dateA - dateB;
          } else if (sortValue === 'date-desc') {
            return dateB - dateA;
          }

          return 0;
        });

        // Maintain the original order after sorting
        sortedTiles.forEach(tile => {
          tilesContainer.appendChild(tile);
        });

        filterTiles(); // Apply the current filter on new sorted order
      }

      categoryFilter1.addEventListener('change', filterTiles);
      categoryFilter2.addEventListener('change', filterTiles);
      sortOptions.addEventListener('change', sortTiles);

      // Initially load the first set of visible tiles
      sortedTiles.slice(0, initialLoadCount).forEach(tile => {
        tile.classList.remove('hidden');
        tile.style.display = 'block'; // Ensure initial tiles are displayed
      });

      // Initial default sorting by ranking then title
      sortByDefault();
    });
    
    // Media view with folded sidebar
    document.addEventListener('DOMContentLoaded', () => {
    const sidebarToggler = document.querySelector('.sidebar-toggler');
    const sidebarWrapper = document.querySelector('.sidebar-wrapper');
  
    console.log('sidebarToggler:', sidebarToggler); // Log for debugging
    console.log('sidebarWrapper:', sidebarWrapper); // Log for debugging
  
    if (sidebarToggler && sidebarWrapper) {
      sidebarToggler.addEventListener('click', () => {
        sidebarWrapper.classList.toggle('expanded');
      });
    } else {
      console.error('Sidebar toggler or wrapper not found');
    }
  });
  </script>
</body>

```

